#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//1
int* CreateArray(size_t size, int rangeA, int rangeB)
{
    if (rangeA > rangeB)
    {
        printf("Ошибка: Некорректный диапазон значений.\n");
        return NULL;
    }

    int* arr = (int*)malloc(size * sizeof(int));
    if (arr == NULL)
    {
        printf("Ошибка выделения памяти.\n");
        return NULL;
    }

    srand(time(NULL));

    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % (rangeB - rangeA + 1) + rangeA;
    }

    return arr;
}
//2
void PrintArray(int* arr, size_t size)
{
    printf("Массив: ");
    for (int i = 0; i < size; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
//3
int SortAscend(int* arr, size_t size)
{
    if (arr == NULL || size <= 1)
    {
        return 1;
    }

    for (size_t i = 1; i < size; i++)
    {
        if (arr[i] < arr[i - 1])
        {
            return 0;
        }
    }

    return 1;
}
//4
void Sorted(int* arr, size_t size)
{

    for (size_t i = 1; i < size; i++)
    {
        int x = arr[i];
        int j = (int)i - 1;

        while (j >= 0 && arr[j] > x)
        {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = x;
    }
}

int main()
{
    size_t size = 10;
    int rangeA = 5, rangeB = 20;

    // 1
    int* arr = CreateArray(size, rangeA, rangeB);

    // 2
    printf("Исходный массив:\n");
    PrintArray(arr, size);

    // 3
    if (SortAscend(arr, size))
    {
        printf("Массив отсортирован по возрастанию.\n");
        printf("Отсортированный массив:\n");
        PrintArray(arr, size);
    }
    else
    {
        printf("Массив НЕ отсортирован по возрастанию.\n");

        // 4
        Sorted(arr, size);

        printf("Массив после сортировки:\n");
        PrintArray(arr, size);

        if (SortAscend(arr, size))
        {
            printf("Массив отсортирован.\n");
        }
        else
        {
            printf("Что-то пошло не так. Массив не отсортирован.\n");
        }
    }

    free(arr);
    return 0;
}
